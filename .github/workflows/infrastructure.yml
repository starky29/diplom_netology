name: Deploy Infrastructure

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  TF_VAR_bucket: ${{ secrets.BUCKET }}

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.5'

      # - name: Configure Terraform Environment
      #   run: |
      #     cd terraform/

      - name: Initialize Terraform
        run: |
          cd ./terraform/
          terraform init -backend-config="bucket=${{ secrets.BUCKET }}" -backend-config="secret_key=${{ secrets.SECRET_KEY }}" -backend-config="access_key=${{ secrets.ACCESS_KEY }}"

      - name: Validate Terraform configuration
        run: |
          cd ./terraform/
          terraform validate

      - name: Plan changes
        run: |
          cd ./terraform/
          echo "my var is ${{env.TF_VAR_bucket}} and ${{vars.TF_VAR_SSH_KEY}}"

          terraform plan -var="access_key=${{ secrets.ACCESS_KEY }}" -var="secret_key=${{ secrets.SECRET_KEY }}" -var="cloud_id=${{ secrets.YANDEX_CLOUD_CLOUD_ID }}" -var="folder_id=${{ secrets.YANDEX_CLOUD_FOLDER_ID }}" -var="token=${{ secrets.YANDEX_CLOUD_TOKEN }}" -var="ssh_key=${{secrets.SSH_KEY}}"

      # - name: Apply changes
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      #   run: |
      #     cd ./terraform/
      #     terraform apply

        
  destroy-infrastructure:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
              terraform_version: '1.8.5'

        - name: Initialize Terraform
          run: terraform init

        - name: Destroy infrastructure
          run: terraform destroy -auto-approve 